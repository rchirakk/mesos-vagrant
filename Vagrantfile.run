# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.provider "virtualbox" do |vb|
    vb.cpus = 2
    vb.memory = 4096
  end

$master = <<MASTER
echo "starting mesos master ..."
nohup /home/vagrant/mesos/build/bin/mesos-master.sh --ip=192.168.10.10 \
               --work_dir=/tmp/ms1 2>&1 > ms1.log &
sudo add-apt-repository ppa:webupd8team/java -y
sudo apt-get update -y
echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" \
   | sudo /usr/bin/debconf-set-selections
sudo apt-get install -y oracle-java8-installer oracle-java8-set-default
export MESOS_NATIVE_JAVA_LIBRARY=/home/vagrant/mesos/build/src/.libs/libmesos.so
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export PATH=$PATH:$JAVA_HOME
nohup marathon/bin/start --master 192.168.10.10:5050 --zk \
  zk://127.0.0.1:2181/marathon --task_launch_timeout 300000 2>&1 > marathon.log &
sleep 15 # marathon to be ready
curl -X POST http://192.168.10.10:8080/v2/apps -d @/vagrant/docker_task1.json \
 -H "Content-type: application/json"
MASTER

$client1 = <<CLIENT1
echo "starting mesos client1 ..."
mkdir -p /var/lib/mesos/cni/plugins
mkdir -p /var/lib/mesos/cni/config
sudo nohup /home/vagrant/mesos/build/bin/mesos-slave.sh --master=192.168.10.10:5050 \
    --ip=192.168.10.11 --work_dir=/var/lib/mesos --containerizers=mesos,docker \
    --executor_registration_timeout=5mins                 \
   --network_cni_config_dir=/var/lib/mesos/cni/config     \
   --network_cni_plugins_dir=/var/lib/mesos/cni/plugins   \
   --isolation=filesystem/linux,docker/runtime            \
   --image_providers=docker 2>&1 > mc1.log &
sleep 3
CLIENT1

$client2 = <<CLIENT2
echo "starting mesos client2 ..."
sudo nohup /home/vagrant/mesos/build/bin/mesos-slave.sh --master=192.168.10.10:5050 \
   --ip=192.168.10.12 --work_dir=/var/lib/mesos --containerizers=mesos,docker \
   --executor_registration_timeout=5mins                  \
   --network_cni_config_dir=/var/lib/mesos/cni/config     \
   --network_cni_plugins_dir=/var/lib/mesos/cni/plugins   \
   --isolation=filesystem/linux,docker/runtime            \
   --image_providers=docker 2>&1 > mc2.log &
sleep 3
CLIENT2

  config.vm.define "ms1" do |ms1|
      ms1.vm.box = "mbase"
      ms1.vm.hostname = "mesos-server1"
      ms1.vm.network "private_network", ip:"192.168.10.10"
      ms1.vm.provision "shell", privileged:false, inline: $master
  end

  config.vm.define "mc1" do |mc1|
      mc1.vm.box = "mbase"
      mc1.vm.hostname = "mesos-client-11"
      mc1.vm.network "private_network", ip:"192.168.10.11"
      mc1.vm.provision "shell", privileged:false, inline: $client1
  end

  config.vm.define "mc2" do |mc2|
      mc2.vm.box = "mbase"
      mc2.vm.hostname = "mesos-client-12"
      mc2.vm.network "private_network", ip:"192.168.10.12"
      mc2.vm.provision "shell", privileged:false, inline: $client2
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
